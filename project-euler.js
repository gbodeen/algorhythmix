var _ = require('/Users/gabrielbodeen/Documents/project-euler/lodash');

// Euler Problems for practice, from https://projecteuler.net/

// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

var problem001 = function(n) {
    return _.chain(_.range(1, n))
        .filter(function(x) {
            return x % 3 === 0 || x % 5 === 0;
        })
        .sum()
        .value();
}

// console.log(problem001(1000)); // -> 233168

// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var problem002 = function() {
    var maxFiboNum = 3;
    while (fibonacci(maxFiboNum, 1, 2) < 4000000) {
        maxFiboNum++;
    }
    var nums = fibonacci.sequence(maxFiboNum, 1, 2).filter(function(x) {
        return x % 2 === 0 && x < 4000000;
    })
    console.log('P2 answer is ' + sum(nums));
}

var fibonacci = function(n) {
    return fibonacci.iterative(n);
}
fibonacci.iterative = _.memoize(function(n) {
    if (n <= 1) return n;
    var a = 0;
    var b = 1;
    var temp;
    for (let i = 2; i <= n; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
});
fibonacci.recursive = function(n, a = 0, b = 1) {
    if (n === 0) {
        return a;
    } else if (n === 1) {
        return b;
    } else {
        return fibonacci.recursive(n - 1, b, a + b);
    }
};
fibonacci.sequence = _.memoize(function(n, a = 0, b = 1) {
    if (n <= 1) return n;
    var seq = [a, b];
    for (let i = 2; i <= n; i++) {
        seq.push(seq[i - 1] + seq[i - 2]);
    }
    return seq;
});

var sum = _.sum;

// problem002(); // -> 4613732




