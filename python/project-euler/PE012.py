"""
The sequence of triangle numbers is generated by adding the 
natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over 
five divisors. What is the value of the first triangle number 
to have over five hundred divisors?
"""

import math


class PE012:
  def triangular(self, n):
    return n * (n + 1) / 2

  def divisors(self, n):
    factors = []
    if n < 1:
      return factors
    factors.insert(0, 1)
    if n == 1:
      return factors
    factors.insert(1, n)
    for i in range(2, int(math.sqrt(n))):
      if n % i == 0:
        L = len(factors) / 2
        factors.insert(L, i)
        factors.insert(L + 1, n / i)
    if math.sqrt(n) % 1 == 0:
      L = len(factors) / 2
      factors.insert(L, int(math.sqrt(n)))
    return factors

  def firstTriangWXDivisors(self, x):
    i = 1
    while len(self.divisors(self.triangular(i))) < x:
      i += 1
    return self.triangular(i)


# tests
test = PE012()
# for i in [0, 1, 2, 3, 4, 5, 16, 28, 49, 50]:
#   print(test.divisors(i))
print(test.firstTriangWXDivisors(6))  # 28
print(test.firstTriangWXDivisors(501))  # 76576500
