/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
*/

// helpers first

export const nthFibonacci = (n, a = 1, b = 1, max = false) => {
  if (!max) {
    for (let i = 0; i < n; i++) {
      [a, b] = [a + b, a];
    }
  } else {
    while (a < n) {
      [a, b] = [a + b, a];
    }
  }
  return b;
}

export const fibonacciList = (n, a = 1, b = 1, max = false) => {
  const list = [a, b];
  if (!max) {
    for (let i = 1; i < n; i++) {
      list.push(list[i] + list[i - 1]);
    }
  } else {
    let i = 1, next = b;
    while (next < n) {
      next = list[i] + list[i - 1]
      i++;
      list.push(next);
    }
    list.pop();
  }
  return list;
}

export const evens = (array) => {
  return array.filter(x => !(x & 1));
}


// now the problem
import { arraySum } from './PE001';

const PE002 = function (max) {
  return arraySum(evens(fibonacciList(max, 1, 1, true)));
}

// tests:
console.log(PE002(90)); // 44
console.log(PE002(4000000)); // 4613732