// Euler Problems from https://projecteuler.net/
// I'm just using these for my own Javascript practice.

// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

var problem001 = function(n) {
    return _.chain(_.range(1, n))
        .filter(function(x) {
            return x % 3 === 0 || x % 5 === 0;
        })
        .sum()
        .value();
}

var _ = require('/Users/gabrielbodeen/Documents/project-euler/lodash');

// console.log(problem001(1000)); // -> 233168

// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var problem002 = function() {
    var maxFiboNum = 3;
    while (fibonacci(maxFiboNum, 1, 2) < 4000000) {
        maxFiboNum++;
    }
    var nums = fibonacci.sequence(maxFiboNum, 1, 2).filter(function(x) {
        return x % 2 === 0 && x < 4000000;
    })
    console.log('P2 answer is ' + sum(nums));
}

var fibonacci = function(n) {
    return fibonacci.iterative(n);
}
fibonacci.iterative = _.memoize(function(n) {
    if (n <= 1) return n;
    var a = 0;
    var b = 1;
    var temp;
    for (let i = 2; i <= n; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
});
fibonacci.recursive = function(n, a = 0, b = 1) {
    if (n === 0) {
        return a;
    } else if (n === 1) {
        return b;
    } else {
        return fibonacci.recursive(n - 1, b, a + b);
    }
};
fibonacci.sequence = _.memoize(function(n, a = 0, b = 1) {
    if (n <= 1) return n;
    var seq = [a, b];
    for (let i = 2; i <= n; i++) {
        seq.push(seq[i - 1] + seq[i - 2]);
    }
    return seq;
});

var sum = _.sum;

// problem002(); // -> 4613732


// Problem 3 
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

var problem003 = function(n = 600851475143) {
    console.log('Largest prime factor of ' + n + ' is ' + Math.max(...prime.factors(n)));
}

var prime = function(n) {
    return prime.isPrime(n);
}
prime.isPrime = _.memoize(function(n) {
    if (n < 2) return false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (prime.isPrime(i) && n % i === 0) return false;
    }
    return true;
});
prime.sequence = function(n) {
    return prime.sequence.iterative(n);
}
prime.sequence.iterative = _.memoize(function(n) {
    var seq = [];
    var i = 2;
    while (seq.length < n) {
        if (prime.isPrime(i)) seq.push(i);
        i++;
    }
    return seq;
});
prime.sequence.recursive = function(n, s = []) {
    if (n === 0) {
        return s;
    } else {
        let last = s[s.length - 1] || 1;
        s.push(prime.nextPrime(last));
        return prime.sequence.recursive(n - 1, s);
    }
};
prime.nextPrime = function(n) {
    var i = n;
    while (true) {
        i++;
        if (prime.isPrime(i)) return i;
    }
}
// prime.factors = function(n) {
//     return factors(n).filter(x => prime.isPrime(x));
// };
prime.factors = function(n, min = 2, fs = []) {
    if (n <= 1) {
        return fs;
    } else if (n % min === 0) {
        fs.push(min);
        return prime.factors(n / min, min, fs);
    } else {
        min = prime.nextPrime(min);
        // if (min > Math.sqrt(n)) {
            // fs.push(min);
            // return fs;
        // } else {
            return prime.factors(n, min, fs);
        // }
    }
}

var factors = function(n) {
    var fs = [1, n];
    var max = n;
    for (let i = 2; i < max; i++) {
        if (n % i === 0) {
            fs.push(i);
            if (i !== n) {
                fs.push(n / i);
            }
            max = n / i;
        } else {
            max = n / (i + 1);
        }
    }
    return fs.sort((a, b) => a - b);
};

// problem003(); // -> 6857


// Problem 4 
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.

var problem004 = function(max = 999) {
    console.log('P4 answer is ' + largestPairProduct(max, isPalindrome));
}

var isPalindrome = function(str) {
    var forward = str.toString();
    var reverse = forward.split('').reverse().join('');;
    return forward === reverse;
};

var largestPairProduct = function(max, filter = alwaysTrue) {
    var a = max;
    var b = max;
    var prod = 0;
    for (let i = max; i > 0; i--) {
        if (i * max < prod) break;
        for (let j = max; j >= i; j--) {
            if (i * j < prod) break;
            if (filter(i * j)) {
                prod = i * j;
            }
        }
    }
    return prod;
}

var alwaysTrue = function(x) { return true; }

// problem004() // -> 906609


// Problem 5 
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

var lcm = function(...nums) {
    // for each argument number, find the prime factorization
    return nums.map(x => prime.factors(x))
      // and keep the max power for each prime
      .reduce(function(maxPrimeFactors, nextPrimeFactors) {
            let uniques = _.uniq(maxPrimeFactors.concat(nextPrimeFactors));
            let newMaxes = [];
            for (let x of uniques) {
                // count instances of x in each
                let xInAcc = maxPrimeFactors.filter(y => y === x).length;
                let xInEle = nextPrimeFactors.filter(y => y === x).length;
                for (i = 0; i < Math.max(xInAcc, xInEle); i++) {
                    newMaxes = newMaxes.concat([x]);
                }
            }
            return newMaxes;
      }, [])
      // and return their product
      .reduce((acc, next) => acc * next, 1);
}

var problem005 = function(n = 20) {
    console.log(lcm(..._.range(0, n + 1)));
}
// problem005(10); // -> 2520
// problem005(20); // -> 232792560
    
var gcd = function(...nums) {
    // for each argument number, find the factors
    var allFactors = [];
    for (let i = 0; i < nums.length; i++) {
        allFactors.push(factors(nums[i]));
    }
    var uniqFactors = _.uniq(_.flatten(allFactors));
    // find the largest value that's in every list
    for (let i = 0; i < allFactors.length; i++) {
        for (let j = 0; j < uniqFactors.length; j++) {
            if (allFactors[i].indexOf(uniqFactors[j]) < 0) {
                uniqFactors[j] = -1;
            }
        }
    }
    return Math.max(...uniqFactors);
} 



// Problem 6 
// The sum of the squares of the first ten natural numbers is,
// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.





